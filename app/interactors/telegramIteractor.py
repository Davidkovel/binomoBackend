# app/interactors/telegram_ai.py
import asyncio
import os
from decimal import Decimal
from datetime import datetime
from typing import List

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import AsyncContainer

from app.core.config import TelegramConfig
from app.interactors.moneyIteractor import MoneyIteractor


class TelegramInteractor:
    def __init__(self, bot_token: str, chat_ids: List[int]):
        self.bot_token = bot_token
        self.chat_ids = chat_ids
        self.bot = Bot(token=self.bot_token, default=DefaultBotProperties(parse_mode="Markdown"))
        self.dp = Dispatcher()
        self._is_running = False
        self._polling_task = None
        self.container: AsyncContainer = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ lifespan
        self.card_repository: AsyncContainer = None

        self._register_handlers()

    def set_container(self, container: AsyncContainer):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.container = container

    def set_container_card(self, container: AsyncContainer):
        self.card_repository = container

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""

        @self.dp.callback_query(F.data.startswith("withdraw_confirm_"))
        async def confirm_withdraw(callback: types.CallbackQuery):
            try:
                _, _, user_id, amount_str = callback.data.split("_", 3)
                amount = Decimal(amount_str)

                # –ü–æ–ª—É—á–∞–µ–º MoneyIteractor –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                async with self.container() as request_container:
                    from app.interactors.moneyIteractor import MoneyIteractor
                    money_interactor = await request_container.get(MoneyIteractor)
                    await money_interactor.update_balance(user_id, -amount)

                new_caption = f"‚úÖ –í—ã–≤–æ–¥ *{amount:,.2f} UZS* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."

                await callback.message.edit_caption(
                    caption=new_caption,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                )

                await callback.answer("–í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                print(f"[TelegramInteractor] Confirm withdraw error: {e}")

        # üîπ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        @self.dp.callback_query(F.data.startswith("withdraw_reject_"))
        async def reject_withdraw(callback: types.CallbackQuery):
            try:
                _, _, user_id, amount_str = callback.data.split("_", 3)
                amount = Decimal(amount_str)

                new_caption = f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ *{amount:,.2f} UZS* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                await callback.message.edit_caption(
                    caption=new_caption,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                )

                await callback.answer("–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                print(f"[TelegramInteractor] Reject withdraw error: {e}")

        @self.dp.callback_query(F.data.startswith("confirm_"))
        async def confirm_callback(callback: types.CallbackQuery):
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "confirm_{user_id}_{amount}"
                parts = callback.data.split("_")
                if len(parts) != 3:
                    await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return

                _, user_id, amount_str = parts
                amount = Decimal(amount_str)

                # –ü–æ–ª—É—á–∞–µ–º MoneyIteractor –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                async with self.container() as request_container:
                    from app.interactors.moneyIteractor import MoneyIteractor
                    money_interactor = await request_container.get(MoneyIteractor)
                    await money_interactor.update_balance(user_id, amount)

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
                new_caption = f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:,} UZS"

                # –°–ø–æ—Å–æ–± 1: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å
                await callback.message.edit_caption(
                    caption=new_caption,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                )

                await callback.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                return True

            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                print(f"Confirm callback error: {e}")

        @self.dp.callback_query(F.data.startswith("reject_"))
        async def reject_callback(callback: types.CallbackQuery):
            try:
                parts = callback.data.split("_")
                if len(parts) != 3:
                    await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return

                _, user_id, amount_str = parts

                new_caption = f"‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"

                await callback.message.edit_caption(
                    caption=new_caption,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                )

                await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                return False

            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                print(f"Reject callback error: {e}")

        @self.dp.message(F.text.startswith("/set_card"))
        async def set_card_handler(message: types.Message):
            parts = message.text.split(maxsplit=1)
            if len(parts) != 2:
                await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/set_card 1234 5678 9012 3456`")
                return

            new_number = parts[1].strip()

            async with self.card_repository() as request_container:
                from app.interactors.cardIteractor import CardIteractor
                card_iteractor = await request_container.get(CardIteractor)
                await card_iteractor.set_bank_card(new_number)

            await message.reply(f"‚úÖ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{new_number}`")

    async def send_invoice_notification(
            self,
            user_id: str,
            user_email: str,
            amount: Decimal,
            file_path: str,
    ):
        formatted_amount = f"{amount:,.2f} UZS"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_{user_id}_{amount}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{user_id}_{amount}"
                )
            ]
        ])

        caption_text = (
            f"üí∞ *–ù–û–í–û–ï –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_id}\n"
            f"üìß *Email:* {user_email}\n"
            f"üíµ *–°—É–º–º–∞:* {formatted_amount}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        success_count = 0
        for chat_id in self.chat_ids:
            try:

                with open(file_path, "rb") as photo_file:
                    photo = FSInputFile(file_path)
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )

                success_count += 1
            except Exception as e:
                print(f"Error sending to chat {chat_id}: {e}")
                continue

        return success_count > 0

    async def send_withdraw_notification(
            self,
            user_id: str,
            user_email: str,
            amount: Decimal,
            file_path: str,
            card_number: str,
            full_name: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""

        formatted_amount = f"{amount:,.2f} UZS"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥",
                        callback_data=f"withdraw_confirm_{user_id}_{amount}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥",
                        callback_data=f"withdraw_reject_{user_id}_{amount}"
                    )
                ]
            ]
        )

        caption_text = (
            "üèß *–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* `{user_id}` | Full Name: `{full_name}`\n"
            f"üìß *Email:* `{user_email}` | Card Number `{card_number}`\n"
            f"üí∏ *–°—É–º–º–∞:* `{formatted_amount}`\n"
            f"üïí *–í—Ä–µ–º—è:* `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
        )

        success_count = 0
        for chat_id in self.chat_ids:
            try:
                photo = FSInputFile(file_path)
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                success_count += 1

            except Exception as e:
                print(f"‚ùå Error sending withdraw message to chat {chat_id}: {e}")
                continue

        return success_count > 0

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤"""
        if self._is_running:
            print("‚ö†Ô∏è Bot is already running")
            return

        try:
            self._is_running = True
            print("ü§ñ Starting Telegram bot polling...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
            self._polling_task = asyncio.create_task(
                self.dp.start_polling(self.bot)
            )

            print("‚úÖ Telegram bot started successfully")

        except Exception as e:
            self._is_running = False
            print(f"‚ùå Failed to start bot: {e}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self._is_running:
            return

        print("üõë Stopping Telegram bot...")

        self._is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        if self._polling_task:
            self._polling_task.cancel()
            try:
                await self._polling_task
            except asyncio.CancelledError:
                pass
            self._polling_task = None

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        await self.dp.storage.close()
        await self.bot.session.close()

        print("‚úÖ Telegram bot stopped successfully")

    @property
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
        return self._is_running
